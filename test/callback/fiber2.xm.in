system = Module("system");
callback = Module("callback");
print = system.out.write_line;
assert = @(x) if (!x) throw Throwable("Assertion failed.");;

fm = Fiber.current();

Derived = Class(callback.Client) :: @{
	$on_message = @(message) {
		fm(message);
	};
};

client = Derived();

server = callback.Server();
server.add(client);
fc = Fiber(@(x) {
	server.post("Hello.");
});
try {
	fc("Hello.");
	assert(false);
} catch (Throwable e) {
	assert(e.__string() == "can not yield beyond native context.");
}
