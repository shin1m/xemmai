alphabetic: [_A-Za-z] ;

digit: [0-9] ;

symbol: alphabetic (alphabetic | digit)* ;

integer: digit+ ;

float: digit+ '.' digit* ;

string: '"' escaped-string '"' ;

arguments: '*' symbol | symbol (',' symbol)* (',' '*' symbol)?;

variable: ':'* symbol ;

self: ':'* '$' (':' | '^')* ;

target: '\'' symbol
	| '\'' '(' expressions? ')'
	| '(' expression ')'
	| '@' ('(' arguments? ')')? '{' statement* '}'
	| '@' '(' arguments? ')' expression
	| 'null'
	| 'true'
	| 'false'
	| integer
	| float
	| string
	| '[' expressions? ']'
	| '{' pairs? '}'
	;

qualifier: symbol | '(' expression ')' ;

subscription: '[' expression ']' ;

action: '.' (':' | '^' | ('?' | '~')? qualifier)
	| subscription
	| '(' expressions? ')'
	;

term0: (variable | self symbol? | target) action* ;

term1: ('+' | '-' | '!' | '~')* term0 ;

term2: term1 (('*' | '/' | '%') term1)* ;

term3: term2 (('+' | '-') term2)* ;

term4: term3 (('<<' | '>>') term3)* ;

term5: term4 (('<' | '>' | '<=' | '>=') term4)* ;

term6: term5 (('==' | '!=') term5)* ;

term7: term6 ('&' term6)* ;

term8: term7 ('^' term7)* ;

term9: term8 ('|' term8)* ;

term10: term9 ('&&' term9)* ;

term11: term10 ('||' term10)* ;

term12: term11 ('::' term11)* ;

term: term12 ('?' term ':' term)? ;

assignment: (variable | self symbol | term0 ('.' qualifier | subscription)) '=' expression ;

catch: 'catch' '(' expression symbol ')' '{' statement* '}' ;

finally: 'finally' '{' statement* '}' ;

compound: 'if' '(' expression ')' block ('else' block)?
	| 'while' '(' expression ')' block
	| 'try' '{' statement* '}' (catch+ finally? | finally)
	;

expression: term | assignment | compound ;

expressions: '*' expression | expression (',' expression)* (',' '*' expression)? ;

pair: expression ':' expression ;

pairs: pair (',' pair)* ;

block: statement | '{' statement* '}' ;

statement: term ';'
	| assignment ';'
	| compound
	| 'break' expression? ';'
	| 'continue' ';'
	| 'return' expression? ';'
	| 'throw' expression ';'
	;

module: statement* ;
