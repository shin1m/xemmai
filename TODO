get rid of f_engine() in f_allocate().
//make t_tuple require constructing elements.
//further reduce code for stack estimation.
//align catch <unknown>.
//resolve race condition between t_hash::f_scan and t_hash::f_rehash.
//	for each t_slot: call f_acquire and f_release in order to simulate duplication of t_entry.
//make t_type uninstantiatable and immutable,
//	and introduce t_instantiatable<T> : T and t_mutable<T> : T which is a type of a derived class of T.
//implement stackless execution.
//implement try, catch, finally, and throw.
//implement bool f_is(t_objecat* a_class).
//implement t_thread::f_join().
//join all threads at the end of main thread.
//synchronize memory of each processor.
//change the way of defining class.
//implement t_code which holds the instructions of t_lambda.
//change parsing and stack frame so that local variables are statically resolved.
//implement tail recursion.
//implement fiber.
//implement extension library.
//change t_type definition by using template specialization.
//	template<typename T> class t_type_of : t_type ...;
//	template<> class t_type_of<t_foo> : t_mutable<t_type> ...;
//define t_type::~t_type() and defer t_library deletion.
//correct context tracing of t_throwable.
//implement automatic type conversion.
//implement all operator expressions.
//change object construction protocol to ensure v_pointer is initialized before accessed by multiple threads.
//implement array.
//implement dictionary.
//implement variadic arguments.
//implement default arguments.
profile and improve smp performance.

performance improvement ideas:
//	implement threaded code.
//	skip scan black for builtin objects.
//	skip scan black on increment.
//	add special instructions. (scope0 get/put, module get, ...)
//	reduce unnecessary increment/decrement on call.
//	reduce unnecessary push/pop using peek/head.
//	add native push/pop of context.
//	skip locking to get/set private scope variable.
//	allocate stack area in each scope.
//	increment/decrement counter for native context instead of push/pop.
//	improve threaded code.
//	skip locking to get constant scope variable.
//	implement field cache.
//	allocate/free private scope immediately instead of allocating object.
//	use variant to hold primitives and objects.
//	implement thread local memory pool.
//	use direct function table instead of virtual function.
